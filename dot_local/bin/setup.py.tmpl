#!/usr/bin/env python3
# filled by templates 
GPGKEY = """
{{output "op" "read" "op://_scripts/api_pass.gpgkey/gpgkey"}}
"""
KEY_GRIPS=dict(enc='B734054E8FD0AC2977D39A7CE60188C997008AEC', auth='EE37281B64C350D60D0D7C862C4D84A4AA72CB92')
GPG_KEY_PASSPHRASE='GPG_KEY_PASSPHRASE'
USER_NAME='piotrczapla'

import os
from pathlib import Path
import json

def run(*args, **kwargs):
    import subprocess as sp
    kwargs = {**dict(capture_output=True, text=True, shell=True, check=True), **kwargs}
    return sp.run(*args, **kwargs)

def dump_login_env(shell='/bin/bash --login -c'):
    s = "import os,json; print(json.dumps({**os.environ}))"
    return json.loads(run(f'{shell} python', input=s).stdout)

def load_env(*keys):
    env = dump_login_env()
    for k in keys: os.environ[k] = env[k]

def setup_chezmoi(update_env=True):
    run(f'sh -c "$(curl -fsLS https://chezmoi.io/get)" -- init --apply {USER_NAME}')
    load_env('PATH', 'SSH_AUTH_SOCK')

class GPG:
    libexecdir = Path(run(f"gpgconf --list-dirs libexecdir"))
    
    def __call__(*args, **kwargs): return run("gpg", *args, **kwargs)
    def preset_passphrase(self, passphrase, keygrip):
        return run(self.libexecdir/'gpg-preset-passphrase', '--preset', keygrip, input=passphrase)
    def import_(self, key):
        return self('--pinentry-mode=loopback', '--batch', '--import', input=key, capture_output=False)
    def keys(self):
        return self("-K", '--with_keygrip').stdout
    
gpg = GPG()

def install_gpgkey(force=False):
    if not force and KEY_GRIPS['enc'] in gpg.keys(): return # key installed no need to install it again    
    if GPGKEY.strip() == "": raise RuntimeError("This is a bare script without gpgkey filled - unable to install it!")
    gpg.import_(key=GPGKEY)

def preset_passphrase(passphrase):
    for keygrip in KEY_GRIPS.values():
        gpg.preset_passphrase(passphrase, keygrip)

class GoPass:
    gopass = Path.home()/'.local/bin/gopass' 
    def __call__(self, *args, **kwargs): return run(self.gopass, *args, **kwargs)
    def clone(self, username, repo='pass'):
        self('clone',  f'git@github.com/{username}/{repo}')

gopass = GoPass()

def setup():
    setup_chezmoi()
    load_env()
    install_gpgkey()
    passphrase = os.environ.get(GPG_KEY_PASSPHRASE, None)
    if passphrase:  
        preset_passphrase(passphrase)    
        gopass.clone(USER_NAME)  

